---
import Footer from "../components/Footer.astro";
import Navbar from "../components/Navbar";
import { getLangFromUrl } from "../i18n/utils";
const lang = getLangFromUrl(Astro.url);
export interface Props {
  title: string;
  description: string;
}

const { title, description } = Astro.props;
const url = Astro.url;
---

<!doctype html>
<html lang={lang}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon1.svg" />
    <meta name="generator" content={Astro.generator} />
    <link rel="stylesheet" href="https://rsms.me/inter/inter.css" />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <link
      href="https://fonts.googleapis.com/css2?family=Chivo:wght@300;400;700&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@300;400;500;700&display=swap"
      rel="stylesheet"
    />
    <meta
      name="google-site-verification"
      content="0B_pubxV8cbJ0b4PFIMeEm13lyASSN28RcEaG6ISf9I"
    />
    <meta
      name="keywords"
      content="Talk Story English, Virtual English Teacher, Learn English Online, Hawaii, native speaker, English Lesson, Hawaii, practice english "
    />
    <meta name="description" content={description} />
    <meta property="og:title" content={title} />
    <meta property="og:site_name" content={title} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://www.talkstoryenglish.com/en" />
    <meta property="og:description" content={description} />
    <meta property="og:locale" content="en_US" />
    <meta
      property="og:image"
      content="https://www.talkstoryenglish.com/TalkStoryEnglish.png"
    />
    <!-- Google tag (gtag.js) -->
    <script
      type="text/partytown"
      async
      src="https://www.googletagmanager.com/gtag/js?id=G-SNT4HT1WC8"></script>
    <script type="text/partytown">
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      gtag("js", new Date());
      gtag("config", "G-SNT4HT1WC8");
    </script>
    <script>
      //@ts-nocheck
      !(function (t, e) {
        var o, n, p, r;
        e.__SV ||
          ((window.posthog = e),
          (e._i = []),
          (e.init = function (i, s, a) {
            function g(t, e) {
              var o = e.split(".");
              2 == o.length && ((t = t[o[0]]), (e = o[1])),
                (t[e] = function () {
                  t.push([e].concat(Array.prototype.slice.call(arguments, 0)));
                });
            }
            ((p = t.createElement("script")).type = "text/javascript"),
              (p.async = !0),
              (p.src = s.api_host + "/static/array.js"),
              (r = t.getElementsByTagName("script")[0]).parentNode.insertBefore(
                p,
                r,
              );
            var u = e;
            for (
              void 0 !== a ? (u = e[a] = []) : (a = "posthog"),
                u.people = u.people || [],
                u.toString = function (t) {
                  var e = "posthog";
                  return (
                    "posthog" !== a && (e += "." + a), t || (e += " (stub)"), e
                  );
                },
                u.people.toString = function () {
                  return u.toString(1) + ".people (stub)";
                },
                o =
                  "capture identify alias people.set people.set_once set_config register register_once unregister opt_out_capturing has_opted_out_capturing opt_in_capturing reset isFeatureEnabled onFeatureFlags getFeatureFlag getFeatureFlagPayload reloadFeatureFlags group updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures getActiveMatchingSurveys getSurveys onSessionId".split(
                    " ",
                  ),
                n = 0;
              n < o.length;
              n++
            )
              g(u, o[n]);
            e._i.push([i, s, a]);
          }),
          (e.__SV = 1));
      })(document, window.posthog || []);
      posthog.init(import.meta.env.PUBLIC_POSTHOG_KEY, {
        api_host: "https://app.posthog.com",
      });
    </script>
    <title>{title}</title>
  </head>
  <body class="flex flex-col min-h-screen">
    <Navbar url={url} client:only="react" />
    <slot />
    <Footer />
  </body>
</html>
<style is:global>
  :root {
    --accent: 124, 58, 237;
    --accent-gradient: linear-gradient(
      45deg,
      rgb(var(--accent)),
      #da62c4 30%,
      white 60%
    );
  }
  code {
    font-family:
      Menlo,
      Monaco,
      Lucida Console,
      Liberation Mono,
      DejaVu Sans Mono,
      Bitstream Vera Sans Mono,
      Courier New,
      monospace;
  }
</style>

<script define:vars={{ lang }}>
  document.addEventListener("DOMContentLoaded", () => {
    const rootHtml = document.documentElement;
    if (lang === "en") {
      rootHtml.style.fontFamily = "'Chivo', sans-serif";
    } else if (lang === "ja") {
      rootHtml.style.fontFamily = "'Noto Sans JP', sans-serif";
    }
  });
</script>
